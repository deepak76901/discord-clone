generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  name     String
  imageUrl String? @db.String
  email    String  @db.String

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String @db.String
  inviteCode String @db.String

  profileId String   @db.ObjectId
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  channels Channel[]

  //in relation annotation we have suffering from an error, below line resolves it
  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //in relation annotation we have suffering from an error, below line resolves it
  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  Text
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(Text)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

// TO intialise pisma 1. npm i prisma 2. npx prisma init

// 1st command after creating model --> npx prisma generate #this add our schema in node modules,so we can work by just using npm init
//2nd command --> npx prisma db push #this will create tables and databases in DATABASE softwares or online DATABASE like planetScale,Mongodb Atlas
